---
layout: post
title:      "Recipe App Revisited"
date:       2020-06-07 12:01:35 +0000
permalink:  recipe_app_revisited
---


For the Sinatra app, I decided to continue with the same concept as before, made much simpler with the power of SQL, ActiveRecord and Sinatra. There were still a lot of features I wanted to add in to my CLI project that weren't in the scope of what I knew at that time. 

The first task was setting up the models and associations. I had to make some decisions about how the app would be set up, namely how the User model would impact things. I already knew that there would be a many-to-many relationship between recipes and ingredients, as in the last project. The User model should be able to store ingredients in a "Pantry" and also store recipes in something like a "Cookbook". So a User has many of both recipes and ingredients. The join model for Users and Ingredients - UsersIngredient - stores a quantity value, representing how many of that item the user owns. I figured that an ingredient, once persisted to the database, should be publicly available to other users. If there's already a banana in the database, why make another reference to something that is roughly the same item? Thus ingredients can have many users.

Recipes that you create should be added to a personal cookbook so you can access them at any time. But I wanted users to also be able to access other users recipes as well. Thus, another many-to-many was used creating a many-to-many-to-many! Letting recipes have many users would complicate the CRUD actions a little - if others can access your recipes they could potentially change things around or even just delete your recipe completely! I added in a creator_id column to the recipe table to work against this. The creator_id is passed the current user's user_id when the object is created, and users aren't given the power to change that value. Another way to improve this would be to make the update function create a copy of the old recipe with the new parameters, and delete the old recipe if no one still had it in their cookbooks.

When creating the associations, I struggled a bit at first with how Active Record pluralizes models, or rather expects them to be pluralized or not. In my first attempt the join models were named like UsersRecipes. While Active Record creates methods to access the database that are plural, like user.ingredients or recipe.recipes_ingredients, it needs the model classes themselves to be singular. For a join model then the naming convention has to be like UsersRecipe - first word plural, second word singular.

Next I set up the session controller, inheriting from the main application controller. I'm a little embarrassed to admit how long it took me to figure out I needed to add "use SessionController" to my config.ru file. This mounts that controller as middleware. I was reminded of the require keyword that loads a file into memory so that another .rb file can access contents and definitions inside of it, except in this case it's giving Sinatra another controller to handle http requests. The session controller handles user signup and login. By adding has_secure_password to the User class, a convenient macro provided by BCrypt, we're given some powerful tools to encrypt the users password and authenticate them when they log in.

Making the CRUD actions through http requests was very easy, Active Record provides such a clear way to access the information you'll need for any function. The html that I wrote doesn't feel very "DRY", I think in future projects I'll try to take better advantage of yielding to different layouts. The user interface was probably the most fun part of making the app, it was all very straightforward. I thought about what I wanted to be able to do on each page and easily set up the mechanisms to do it. 

I really wanted to make dynamic forms, so that the user could add as many ingredients to a recipe as the recipe really needed. I didn't want to make a set number of inputs and then have tons of empty slots for simpler recipes, or not enough for very complex ones. I looked into it and it seemed to require Javascript if I wanted to keep the user on the same page while they changed the form to their needs. I found an [example](http://www.randomsnippets.com/2008/02/21/how-to-dynamically-add-form-elements-via-javascript/) of a dynamic form and used that to build what I needed. First I put a div inside of the form, around the first set of inputs, and then used that div to append new html elements below. I struggled a bit to find how to set a drop-down list as an attribute of the input, and discovered that some html attributes don't give simple setter methods like "input.list =" and instead need to call "setAttribute()"

This project came much closer to the vision I was hoping for in my last project, and I think SQL and ActiveRecord played the biggest part of that. I feel like there's still more I can add. I want to make measurements and conversions available to include in the ingredient quantity, since currently, only whole amounts of ingredients are allowed and that's not realistic or convenient. I want to make the instructions for a recipe into an array, or possibly its own model, since that's more accurate to how one writes instructions for a recipe. That could also allow users to add links to different skill tutorials, for instance if a recipe tells you to dice a vegetable, it could link you to a video of proper knife techniques. Another big feature I want to add is a user schedule, a calendar that can be used to track calories over time, or set goals and meal plans ahead of time. That would lend itself to auto-generating shopping trips where the user could be told what they'll need to buy based on the coming week's planned meals.
